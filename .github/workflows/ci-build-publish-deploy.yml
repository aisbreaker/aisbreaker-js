name: Publish

on:
  push:
    branches:
      # TODO: only run on 'main' branch after initial setup:
      - develop
      - main
      - feature/ci-publish-and-deploy-docker-images

jobs:

  #
  # Build all packages, but do not publish.
  # This is intended to run on repo forks only.
  #
  # Assumption: This (environment) variable is NOT SET in CI:
  # - secrets.NPM_AUTH_TOKEN
  #
  build-npms:
    runs-on: ubuntu-latest
    if: github.repository != 'aisbreaker/aisbreaker-js'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup .npmrc file to publish to npm
      - name: Setup npm authentication
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Build and Publish all packages/modules to npm
        run: |
          echo "./build-all-packages.sh"
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}



  #
  # Build and publish all npm packages
  #
  # Required (environment) variable(s) from CI:
  # - secrets.NPM_AUTH_TOKEN
  #
  build-and-publish-npms:
    runs-on: ubuntu-latest
    if: github.repository == 'aisbreaker/aisbreaker-js'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup .npmrc file to publish to npm
      - name: Setup npm authentication
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Build and Publish all packages/modules to npm
        # TODO: re-enable script: remove 'echo'
        run: |
          echo "./build-and-publish-all-packages.sh"
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}



  #
  # build and publish Docker images
  #
  # Required (environment) variable(s) from CI:
  # - secrets.DOCKER_USERNAME
  # - secrets.DOCKER_PASSWORD
  #
  aisbreaker-server-docker-image-build-and-publish:
    # almost duplicated code (except env values) in jobs: aisbreaker-*-image-build-and-publish
    runs-on: ubuntu-latest
    needs: build-and-publish-npms
    env:
      PACKAGE_DIR: packages/aisbreaker-server
      IMAGE_NAME: aisbreaker/aisbreaker-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          cd "${PACKAGE_DIR}/"

          export VERSION=`cat VERSION`
          if [[ -z "$VERSION" ]] ; then
            echo "Couldn't find valid VERSION file"
            exit 1
          fi

          cp ../../package-lock.json ./
          docker build -t "${IMAGE_NAME}:${VERSION}" -t "${IMAGE_NAME}:latest" .

      - name: Publish Docker image 
        run: |
          cd "${PACKAGE_DIR}/"

          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
          docker push --all-tags "${IMAGE_NAME}"

  aisbreaker-chat-webapp-docker-image-build-and-publish:
    # almost duplicated code (except env values) in jobs: aisbreaker-*-image-build-and-publish
    runs-on: ubuntu-latest
    needs: build-and-publish-npms
    env:
      PACKAGE_DIR: packages/aisbreaker-chat-webapp
      IMAGE_NAME: aisbreaker/aisbreaker-chat-webapp
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          cd "${PACKAGE_DIR}/"

          export VERSION=`cat VERSION`
          if [[ -z "$VERSION" ]] ; then
            echo "Couldn't find valid VERSION file"
            exit 1
          fi

          cp ../../package-lock.json ./
          docker build -t "${IMAGE_NAME}:${VERSION}" -t "${IMAGE_NAME}:latest" .

      - name: Publish Docker image 
        run: |
          cd "${PACKAGE_DIR}/"

          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
          docker push --all-tags "${IMAGE_NAME}"



  #
  # deploy to Kubernetes Dev namespace
  #
  # Required (environment) variable(s) from CI:
  # - secrets.KUBE_CONFIG = `base64 ~/.kube/config -w0` 
  #
  # If more features are needed for k8s deployment, check:
  # - https://github.com/marketplace/actions/simple-deploy-to-kubernetes-cluster
  # - k8s deployment with several specific GitHub actions:
  #   - https://nicwortel.nl/blog/2022/continuous-deployment-to-kubernetes-with-github-actions
  #
  aisbreaker-server-k8s-dev-deploy:
    runs-on: ubuntu-latest
    needs:
      - aisbreaker-server-docker-image-build-and-publish
      - aisbreaker-chat-webapp-docker-image-build-and-publish
    env:
      PACKAGE_DIR: packages/aisbreaker-server
      IMAGE_NAME: aisbreaker/aisbreaker-server
      KUBE_NAMESPACE: aisbreaker-dev
      KUBE_DEPLOYMENT_TEMPLATE_FILE: deployment/aisbreaker-dev/aisbreaker-demo-api-server-server.yaml.tmpl
    # duplicated code in 'steps' in jobs: aisbreaker-*-k8s-[dev|prod]-deploy (THIS IS THE ORIGINAL)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: actions-hub/kubectl@master
        # https://github.com/actions-hub/kubectl:
        # Includes code similar to:
        #    echo "${{secrets.KUBE_CONFIG}}" | base64 -d > ~/.kube/config
        env:
          KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}

      - name: Test kubectl setup - show namespaces
        uses: actions-hub/kubectl@master
        with:
          args: get namespaces
          
      - name: Customize k8s deployment file
        run: |
          export VERSION=`cat ${PACKAGE_DIR}/VERSION`
          envsubst '$IMAGE_NAME:$VERSION' < "${KUBE_DEPLOYMENT_TEMPLATE_FILE}" > server.yaml
          echo "---- server.yaml ----"
          cat server.yaml

      - name: Delete (old) k8s deployment
        uses: actions-hub/kubectl@master
        with:
          args: delete -f server.yaml --namespace ${{env.KUBE_NAMESPACE}} --ignore-not-found=true

      - name: Apply k8s deployment file
        uses: actions-hub/kubectl@master
        with:
          args: apply -f server.yaml --namespace ${{env.KUBE_NAMESPACE}}
  
      - name: Check k8s deployment
        uses: actions-hub/kubectl@master
        with:
          args: get pods --namespace ${{env.KUBE_NAMESPACE}}

  aisbreaker-chat-webapp-k8s-dev-deploy:
    runs-on: ubuntu-latest
    needs:
      - aisbreaker-server-docker-image-build-and-publish
      - aisbreaker-chat-webapp-docker-image-build-and-publish
    env:
      PACKAGE_DIR: packages/aisbreaker-chat-webapp
      IMAGE_NAME: aisbreaker/aisbreaker-chat-webapp
      KUBE_NAMESPACE: aisbreaker-dev
      KUBE_DEPLOYMENT_TEMPLATE_FILE: deployment/aisbreaker-dev/aisbreaker-demo-chat-webapp-server.yaml.tmpl
    # duplicated code in 'steps' in jobs: aisbreaker-*-k8s-[dev|prod]-deploy (THIS IS A COPY)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: actions-hub/kubectl@master
        # https://github.com/actions-hub/kubectl:
        # Includes code similar to:
        #    echo "${{secrets.KUBE_CONFIG}}" | base64 -d > ~/.kube/config
        env:
          KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}

      - name: Test kubectl setup - show namespaces
        uses: actions-hub/kubectl@master
        with:
          args: get namespaces
          
      - name: Customize k8s deployment file
        run: |
          export VERSION=`cat ${PACKAGE_DIR}/VERSION`
          envsubst '$IMAGE_NAME:$VERSION' < "${KUBE_DEPLOYMENT_TEMPLATE_FILE}" > server.yaml
          echo "---- server.yaml ----"
          cat server.yaml

      - name: Delete (old) k8s deployment
        uses: actions-hub/kubectl@master
        with:
          args: delete -f server.yaml --namespace ${{env.KUBE_NAMESPACE}} --ignore-not-found=true

      - name: Apply k8s deployment file
        uses: actions-hub/kubectl@master
        with:
          args: apply -f server.yaml --namespace ${{env.KUBE_NAMESPACE}}
  
      - name: Check k8s deployment
        uses: actions-hub/kubectl@master
        with:
          args: get pods --namespace ${{env.KUBE_NAMESPACE}}



  #
  # intergration test with Kubernetes Dev namespace
  #
  # Required (environment) variable(s) from CI:
  # - secrets.AISBREAKER_SERVER_URL
  # - secrets.AISBREAKER_API_KEY
  # - secrets.OPENAI_API_KEY
  aisbreaker-integration-test-with-dev:
    runs-on: ubuntu-latest
    needs: 
      - aisbreaker-server-k8s-dev-deploy
      - aisbreaker-chat-webapp-k8s-dev-deploy
    env:
      PACKAGE_DIR: packages/aisbreaker-server
      IMAGE_NAME: aisbreaker/aisbreaker-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install dependencies
        run: |
          export VERSION=`cat packages/aisbreaker-server/VERSION`
          echo "V=${VERSION}"
          set -x
          # avaoid symlinks from aisbreaker-* packages
          rm -rf package.json
          cd test/
          npm install
          ls -l node_modules/
      
      - name: Build and run integration tests
        run: |
          cd test/
          env | sort
          ./integration-tests.sh
        env:
          AISBREAKER_SERVER_URL: ${{secrets.AISBREAKER_SERVER_URL}}
          AISBREAKER_API_KEY: ${{secrets.AISBREAKER_API_KEY}}
          OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: JEST Tests            # Name of the check run which will be created
          path: reports/jest-*.xml    # Path to test results
          reporter: jest-junit        # Format of test results


  #
  # deploy - wait for manual approval/review
  # 
  aisbreaker-k8s-prod-deploy-approval:
    runs-on: ubuntu-latest
    needs:
      - aisbreaker-integration-test-with-dev
    environment:
      # use environment with environment protection rules/required reviewers 
      # (see https://devblogs.microsoft.com/devops/i-need-manual-approvers-for-github-actions-and-i-got-them-now/ for explanation)
      name: demo-prod
    env:
      PACKAGE_DIR: packages/aisbreaker-server
      IMAGE_NAME: aisbreaker/aisbreaker-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Approved Info
        run: 'echo "Approved ... continue with PROD deployment job ..."'
 
  
  #
  # deploy to Kubernetes Prod namespace - after manual approval
  # 
  # Required (environment) variable(s) from CI:
  # - secrets.KUBE_CONFIG = `base64 ~/.kube/config -w0` 
  #
  # If more features are needed for k8s deployment, check:
  # - https://github.com/marketplace/actions/simple-deploy-to-kubernetes-cluster
  # - k8s deployment with several specific GitHub actions:
  #   - https://nicwortel.nl/blog/2022/continuous-deployment-to-kubernetes-with-github-actions
  aisbreaker-server-k8s-prod-deploy:
    runs-on: ubuntu-latest
    needs:
      - aisbreaker-k8s-prod-deploy-approval
    # don't specify environment here again - to avoid need of multiple approvals:
    #environment:
    #  name: demo-prod
    env:
      PACKAGE_DIR: packages/aisbreaker-server
      IMAGE_NAME: aisbreaker/aisbreaker-server
      KUBE_NAMESPACE: aisbreaker-prod
      KUBE_DEPLOYMENT_TEMPLATE_FILE: deployment/aisbreaker-dev/aisbreaker-demo-api-server-server.yaml.tmpl
    # duplicated code in 'steps' in jobs: aisbreaker-*-k8s-[dev|prod]-deploy (THIS IS A COPY)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: actions-hub/kubectl@master
        # https://github.com/actions-hub/kubectl:
        # Includes code similar to:
        #    echo "${{secrets.KUBE_CONFIG}}" | base64 -d > ~/.kube/config
        env:
          KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}

      - name: Test kubectl setup - show namespaces
        uses: actions-hub/kubectl@master
        with:
          args: get namespaces
          
      - name: Customize k8s deployment file
        run: |
          export VERSION=`cat ${PACKAGE_DIR}/VERSION`
          envsubst '$IMAGE_NAME:$VERSION' < "${KUBE_DEPLOYMENT_TEMPLATE_FILE}" > server.yaml
          echo "---- server.yaml ----"
          cat server.yaml

      - name: Delete (old) k8s deployment
        uses: actions-hub/kubectl@master
        with:
          args: delete -f server.yaml --namespace ${{env.KUBE_NAMESPACE}} --ignore-not-found=true

      - name: Apply k8s deployment file
        uses: actions-hub/kubectl@master
        with:
          args: apply -f server.yaml --namespace ${{env.KUBE_NAMESPACE}}
  
      - name: Check k8s deployment
        uses: actions-hub/kubectl@master
        with:
          args: get pods --namespace ${{env.KUBE_NAMESPACE}}

  aisbreaker-chat-webapp-k8s-prod-deploy:
    runs-on: ubuntu-latest
    needs:
      - aisbreaker-k8s-prod-deploy-approval
    # don't specify environment here again - to avoid need of multiple approvals:
    #environment:
    #  name: demo-prod
    env:
      PACKAGE_DIR: packages/aisbreaker-chat-webapp
      IMAGE_NAME: aisbreaker/aisbreaker-chat-webapp
      KUBE_NAMESPACE: aisbreaker-prod
      KUBE_DEPLOYMENT_TEMPLATE_FILE: deployment/aisbreaker-dev/aisbreaker-demo-chat-webapp-server.yaml.tmpl
    # duplicated code in 'steps' in jobs: aisbreaker-*-k8s-[dev|prod]-deploy (THIS IS A COPY)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: actions-hub/kubectl@master
        # https://github.com/actions-hub/kubectl:
        # Includes code similar to:
        #    echo "${{secrets.KUBE_CONFIG}}" | base64 -d > ~/.kube/config
        env:
          KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}

      - name: Test kubectl setup - show namespaces
        uses: actions-hub/kubectl@master
        with:
          args: get namespaces
          
      - name: Customize k8s deployment file
        run: |
          export VERSION=`cat ${PACKAGE_DIR}/VERSION`
          envsubst '$IMAGE_NAME:$VERSION' < "${KUBE_DEPLOYMENT_TEMPLATE_FILE}" > server.yaml
          echo "---- server.yaml ----"
          cat server.yaml

      - name: Delete (old) k8s deployment
        uses: actions-hub/kubectl@master
        with:
          args: delete -f server.yaml --namespace ${{env.KUBE_NAMESPACE}} --ignore-not-found=true

      - name: Apply k8s deployment file
        uses: actions-hub/kubectl@master
        with:
          args: apply -f server.yaml --namespace ${{env.KUBE_NAMESPACE}}
  
      - name: Check k8s deployment
        uses: actions-hub/kubectl@master
        with:
          args: get pods --namespace ${{env.KUBE_NAMESPACE}}
